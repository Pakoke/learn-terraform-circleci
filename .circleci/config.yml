version: 2.1

parameters:
  image-tag:
    type: string
    default: "latest"
  workingdir:
    type: string
    default: "."
  aws-accountid:
    type: string
    default: ""
  aws-access-key:
    type: string
    default: $AWS_ACCESS_KEY_ID
  aws-secret-key:
    type: string
    default: $AWS_SECRET_ACCESS_KEY
  aws-region:
    type: string
    default: "eu-west-2"

orbs:
  orb-tools: circleci/orb-tools@10.0
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-code-deploy: circleci/aws-code-deploy@2.0.0

jobs:
  plan-apply:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd infrastructure/
            terraform init -input=false
            terraform plan -out tfapply -var-file variables.tfvars -var="region=${DEFAULT_AWS_REGION}"
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd infrastructure/
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  build-push-image:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - attach_workspace:
          at: .
      - aws-ecr/build-and-push-image:
          account-url: DEFAULT_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 10m
          path: ./apps/dotnetapi/src
          region: DEFAULT_AWS_REGION
          repo: dotnetapi
          skip-when-tags-exist: false
          tag: 'latest,${CIRCLE_SHA1}'

  plan-apply-apps:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform init & plan
          command: |
            cd apps/terraform/
            terraform init -input=false
            terraform plan -out tfapply-apps -var-file variables.tfvars -var="region=${DEFAULT_AWS_REGION}" -var="blue_green=blue"
      - persist_to_workspace:
          root: .
          paths:
            - .
            
  
  apply-apps:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd apps/terraform/
            terraform apply -auto-approve tfapply-apps
      - persist_to_workspace:
          root: .
          paths:
            - .

  blue-green-deployment:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Update PATH and Define Environment Variable at Runtime
          command: |
            echo 'export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)' >> $BASH_ENV
            source $BASH_ENV    
      - aws-code-deploy/deploy-bundle:
          application-name: dotnetapi-app
          bundle-bucket: codedeploy-appspec-2021odilo
          bundle-key: dotnetapi-app/appspec.json
          deployment-group: dotnetapi-deploymentgroup
          bundle-type: json
          deploy-bundle-arguments: --region ${DEFAULT_AWS_REGION}
          get-deployment-group-arguments: --region ${DEFAULT_AWS_REGION}
          deployment-config: CodeDeployDefault.ECSAllAtOnce

  plan-destroy-apps:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd apps/terraform/
            terraform plan -destroy -out tfdestroy-apps -var-file variables.tfvars -var="region=${DEFAULT_AWS_REGION}"
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy-apps:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd apps/terraform/
            terraform apply -auto-approve tfdestroy-apps
      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd infrastructure/
            terraform plan -destroy -out tfdestroy -var-file variables.tfvars -var="region=${DEFAULT_AWS_REGION}"
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd infrastructure/
            terraform apply -auto-approve tfdestroy
  

workflows:
  version: 2.1
  plan_approve_apply:
    jobs:
      - plan-apply
      - hold-apply:
          type: approval
          requires:
            - plan-apply
      - apply:
          requires:
            - hold-apply
      - build-push-image:
          requires:
            - apply
      - plan-apply-apps:
          requires:
            - build-push-image
      - hold-apply-apps:
          type: approval
          requires:
            - plan-apply-apps
      - apply-apps:
          requires:
            - hold-apply-apps
      - blue-green-deployment:
          requires:
            - apply-apps
      - plan-destroy-apps:
          requires:
            - blue-green-deployment
      - hold-destroy-apps:
          type: approval
          requires:
            - plan-destroy-apps
      - destroy-apps:
          requires:
            - hold-destroy-apps
      - plan-destroy:
          requires:
            - destroy-apps
      - hold-destroy:
          type: approval
          requires:
            - plan-destroy
      - destroy:
          requires:
            - hold-destroy